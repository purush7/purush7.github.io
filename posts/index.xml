<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on purush7</title>
    <link>https://purush7.github.io/posts/</link>
    <description>Recent content in Posts on purush7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jun 2022 13:54:41 +0530</lastBuildDate><atom:link href="https://purush7.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript_tutorial</title>
      <link>https://purush7.github.io/posts/javascript_tutorial/</link>
      <pubDate>Thu, 30 Jun 2022 13:54:41 +0530</pubDate>
      
      <guid>https://purush7.github.io/posts/javascript_tutorial/</guid>
      <description>Javascript was only used in browsers to build interactive sites. Dahl build a cpp program which is present in chrome as v8 engine to run javascript and it is called as node
To run js on browser browser-&amp;gt;inspect-&amp;gt;console
To printout the statements
console.log(&amp;#34;Hello&amp;#34;,&amp;#34;World&amp;#34;); The variables are created by var or let keyword Scope of var is functional Scope of let is block {}
constants can be created by const keyword</description>
      <content>&lt;p&gt;Javascript was only used in browsers to build interactive sites.
Dahl build a cpp program which is present in chrome as v8 engine to run javascript and it is called
as node&lt;/p&gt;
&lt;p&gt;To run js on browser
&lt;code&gt;browser-&amp;gt;inspect-&amp;gt;console&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To printout the statements&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The variables are created by &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; keyword
Scope of var is functional
Scope of let is block {}&lt;/p&gt;
&lt;p&gt;constants can be created by &lt;code&gt;const&lt;/code&gt; keyword&lt;/p&gt;
&lt;p&gt;Types of variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primitive Types
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;null (to mark the variable as empty)&lt;/li&gt;
&lt;li&gt;undefined (default type if the value of variable isn&amp;rsquo;t defined)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference Types
&lt;ul&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To know the type of a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Arrays:
In js, arrays functions as stack,queue and lists. Addressing uses zero-based indices. Arrays in JS
are sparse, meaning that we can also assign variables to random locations even though prev cells
were undefined. It can have elements with different types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myArray&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Array(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;myArray&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Stacks,Queues,Lists:&lt;/p&gt;
&lt;p&gt;Arrays has &lt;code&gt;push&lt;/code&gt;,&lt;code&gt;pop&lt;/code&gt;,&lt;code&gt;shift&lt;/code&gt;and&lt;code&gt;unshift&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;push -&amp;gt; inserts at the end of the array
pop  -&amp;gt; removes at the end of the array
shift -&amp;gt; inserts at the start of the array
unshift -&amp;gt; removes at the start of the array&lt;/p&gt;
&lt;p&gt;By using push,pop or shift,unshift arrays can behave as stacks
With push,shift or unshift,pop it can behave as queues&lt;/p&gt;
&lt;p&gt;Splicing:&lt;/p&gt;
&lt;p&gt;In JS, we can split the array into two by using splice&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;splice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// startingIndex, length of child array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Operators:&lt;/p&gt;
&lt;p&gt;Addition operator (+):
It is used to add numbers and also for concatenation of strings.
If + is used in b/w string and other data type, then other data type is converted into string
&lt;code&gt;js var a =1,b=2; var c = a=b; var name = &amp;quot;John&amp;quot;; console.log(&amp;quot;Hello &amp;quot;+name); //Hello John console.log(&amp;quot;hey &amp;quot;+34); // hey 34 &lt;/code&gt;
Similarly -,*,/,% are for subtraction, multiplication, division and modulus
JS also supports combination of above operators with equal i.e +=, -=, *=, /=,%=&lt;/p&gt;
&lt;p&gt;JS has &lt;code&gt;Math&lt;/code&gt; module which contains
-   Math.abs (absolute value)
-   Math.exp (calculates e to the power)
-   Math.pow(x,y) (calculates the result of x to the power of y)
-   Math.floor removes the fraction part from the number
-   Math.random() will give a random number x where 0&amp;lt;=x&amp;lt;1&lt;/p&gt;
&lt;p&gt;Conditions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//false compares types along with the values (strict comparision)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;comparision: ==, ===, &amp;gt;,&amp;lt;,!,||,&amp;amp;&amp;amp;&lt;/p&gt;
&lt;p&gt;Switch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rank&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commander&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rank&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Private&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sergeant&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You are not authorized.&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commander&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello commander! what can I do for you today?&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Captain&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello captain! I will do anything you wish.&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I don&amp;#39;t know what your rank is.&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Loops:&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SRIB interview experience</title>
      <link>https://purush7.github.io/posts/samsung_hiring_experience/</link>
      <pubDate>Thu, 30 Jun 2022 06:29:34 +0530</pubDate>
      
      <guid>https://purush7.github.io/posts/samsung_hiring_experience/</guid>
      <description>Hi,
Today, I want to share the whole interview process of SRIB, I went through.
It started in June 2022 with a call from a 3rd party consultant after a long break. He called me on behalf of Samsung Research and Development Institute of Bangalore. He was interested in my naukri profile.
They conducted the test on 18th June. I did just average, some of the testcases didn&amp;rsquo;t pass TLE :( (I don&amp;rsquo;t remember the time and memory constraints)</description>
      <content>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Today, I want to share the whole interview process of SRIB, I went through.&lt;/p&gt;
&lt;p&gt;It started in June 2022 with a call from a 3rd party consultant after a long break.
He called me on behalf of Samsung Research and Development Institute of Bangalore. He was
interested in my naukri profile.&lt;/p&gt;
&lt;p&gt;They conducted the test on 18th June. I did just average, some of the testcases
didn&amp;rsquo;t pass TLE :( (I don&amp;rsquo;t remember the time and memory constraints)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Given the set of rod lengths (duplicates are allowed). I need to find two disjoint
subsets with same sum and need to maximize the sum. I just need to output the maximum
sum.
Example:  {1,2,3,4}. The subsets can be {1,3} and {4}; {1,4} and {2,3}. 
Here output should be 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;They gave me a chance to retake the test on 25th June. This time, I have cleared the test:)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Assume Top-left corner as 0,0 and x-axis on horizontal and y-axis vertically.
The input will be the n plot co-ordinates(top left corner and bottom right). Here all
the plots are in rectangle shape and they may share the same edge but there won&#39;t be 
any overlapping area. We need to find the maximum possible square plot size that can 
be formed by these n plots such that
i)    There shouldn&#39;t be any area inside the square which isn&#39;t among the n plots.
ii)   There shouldn&#39;t be any plot such that only a part of it is inside the square.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, I got an amazon voucher worth of 5000 for clearing the test and a suprise interview on 29th
June.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Asked me about JS
- OOP
- Implementing Stack using Linked list
- My work experience at previous companies
- Data Structures Stack vs queue, hashmap vs trie, array vs linkedlist ....
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Result: Passed&lt;/p&gt;
&lt;p&gt;It seems the JS is mandatory for the role, there are interviewing and I didn&amp;rsquo;t have much experience.
I asked the recuriter before the interview about the JD and he didn&amp;rsquo;t shared it and said he too
didn&amp;rsquo;t know. The role I was interviewed is for Voice Intelligence team(I asked the interviewer at
end of interview)&lt;/p&gt;
&lt;p&gt;Take-aways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should know the JD well&lt;/li&gt;
&lt;li&gt;Mock Interview (would have improved my performance)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then recruiter called me on 30th June and he scheduled a meet on 1st July with HR. I expected the
meet will be on behaviorial,my work experience, discussing about package, and the joining date.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Asked me about my work experiences
- Issues I faced in my prev work
- 3 Toughest challengers I faced in work
- 3 things I liked in my prev company
- My proudest moment in my prev company
- My career goals and interests
- Higher Education
- When can I join?
- Expected package?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;It seems it went well, atleast I am statisfied with it.&lt;/p&gt;
&lt;p&gt;Finally, the recruiter called me on&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
