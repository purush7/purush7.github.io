<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>merge on purush7</title>
    <link>https://purush7.github.io/tags/merge/</link>
    <description>Recent content in merge on purush7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Feb 2023 16:48:20 +0530</lastBuildDate><atom:link href="https://purush7.github.io/tags/merge/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Merging and rebasing</title>
      <link>https://purush7.github.io/posts/git_merge_rebase/</link>
      <pubDate>Thu, 09 Feb 2023 16:48:20 +0530</pubDate>
      
      <guid>https://purush7.github.io/posts/git_merge_rebase/</guid>
      <description>Today,
I will be explaining git rebase, git merge, purpose for these and when to use these.
Both git rebase and git merge are used to integrate the changes of one branch to another branch
let&amp;rsquo;s suppose this is the scenario:
Feature &amp;mdash;- e-f-g | Main -&amp;gt; a-b&amp;mdash;-c&amp;ndash;d
Now to have c,d commits in feature branch, we have 2 options
  Merge
git checkout feature &amp;amp;&amp;amp; git merge main This makes a new commit in feature branch let suppose it is g&#39; which contains main commits c and d.</description>
      <content>&lt;p&gt;Today,&lt;/p&gt;
&lt;p&gt;I will be explaining git rebase, git merge, purpose for these and when to use these.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; are used to integrate the changes of one branch to another branch&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s suppose this is the scenario:&lt;/p&gt;
&lt;p&gt;Feature     &amp;mdash;- e-f-g
|
Main -&amp;gt; a-b&amp;mdash;-c&amp;ndash;d&lt;/p&gt;
&lt;p&gt;Now to have c,d commits in &lt;code&gt;feature&lt;/code&gt; branch, we have 2 options&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Merge&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout feature &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git merge main 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes a new commit in &lt;code&gt;feature&lt;/code&gt; branch let suppose it is &lt;code&gt;g&#39;&lt;/code&gt; which contains main commits &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Feature     &amp;mdash;- e-f-g-g&#39;
|
Main -&amp;gt; a-b&amp;mdash;-c&amp;ndash;d&lt;/p&gt;
&lt;p&gt;The above case is the &lt;code&gt;recursive&lt;/code&gt; merge. If suppose there isn&amp;rsquo;t commits &lt;code&gt;e&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt;, then merge just need to add commits &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;.
The latter case is called the &lt;code&gt;fast-fowarded&lt;/code&gt; where the commit history is linear and it doesn&amp;rsquo;t need to add a commit. In this case&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git merge main // won&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t create a new commit but &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; we use &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;--no-ff&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; it will create a new commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;to-reset-merge&#34;&gt;To reset merge:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; this command can be used to reset merge if the  last commit is merge commit
or you can get the commit from &lt;code&gt;git reflog&lt;/code&gt; and do &lt;code&gt;git reset --hard #commit&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rebase&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout feature &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git rebase main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This adds all the commits in main and then adds the latest commits of feature. Basically changes the parent of first different commit in the &lt;code&gt;feature&lt;/code&gt; branch and child of the last &lt;code&gt;main&lt;/code&gt; commit.&lt;/p&gt;
&lt;p&gt;Feature           e&#39;-f&#39;-g&#39;
|
Main -&amp;gt; a-b&amp;mdash;-c&amp;ndash;d&lt;/p&gt;
&lt;h3 id=&#34;to-reset-the-rebase&#34;&gt;To reset the rebase:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git reset --hard ORIG_HEAD&lt;/code&gt; Rebase stores the old state before rebase in &lt;code&gt;ORIG_HEAD&lt;/code&gt;
or you can get the commit from &lt;code&gt;git reflog&lt;/code&gt; and do &lt;code&gt;git reset --hard #commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Feature      &amp;mdash;- e-f-g
|
Main -&amp;gt; a-b&amp;mdash;-c&amp;ndash;d&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt; has same changes and the committer info is different basically if both the checksum is same then in &lt;code&gt;git rebase main feature&lt;/code&gt;, the final history of &lt;code&gt;feature&lt;/code&gt; will look like
a-&amp;gt;b-&amp;gt;c-&amp;gt;d-&amp;gt;f-&amp;gt;g. It skips the &lt;code&gt;e&lt;/code&gt; in the feature branch.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;git rebase&lt;/code&gt; doesn&amp;rsquo;t take merge commits, then mention &lt;code&gt;-p&lt;/code&gt; to take merge commits into consideration while rebasing&lt;/p&gt;
&lt;p&gt;Pro&amp;rsquo;s and Con&amp;rsquo;s of each:&lt;/p&gt;
&lt;p&gt;Rebase pros are the commit history will be linear so all the commits of a feature will be present at one place.&lt;/p&gt;
&lt;p&gt;Cons are as the commit history changes, the will be problem of reaching a commit and the resolving conflicts will be a problem&lt;/p&gt;
&lt;p&gt;Merge pros and cons are the vice-versa of rebase.&lt;/p&gt;
&lt;p&gt;So rebase will be useful you are IC(individual contributor) and merge will be useful if there are many people.&lt;/p&gt;
&lt;h2 id=&#34;squash&#34;&gt;Squash:&lt;/h2&gt;
&lt;p&gt;For squashing, you can use &lt;code&gt;git rebase -i HEAD~3&lt;/code&gt; and have s for the commits to squash it.&lt;/p&gt;
&lt;h2 id=&#34;best-solution&#34;&gt;Best solution:&lt;/h2&gt;
&lt;p&gt;It is best to use rebase on the &lt;code&gt;feature&lt;/code&gt; branch (i.e while getting the latest changes) and use merge in &lt;code&gt;main&lt;/code&gt; branch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use rebase while pulling the &lt;code&gt;main&lt;/code&gt; changes into &lt;code&gt;feature&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;git config --add branch.master.mergeoptions --ff-only&lt;/code&gt; or &lt;code&gt;git config --add branch.main.mergeoptions --ff-only&lt;/code&gt; and squash the feature commits before merge&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;You can get the best of both worlds: rebase local changes before pushing to clean up your work, but never rebase anything that youâ€™ve pushed somewhere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is &lt;code&gt;--onto&lt;/code&gt; flag in &lt;code&gt;git rebase&lt;/code&gt; which is much useful. In &lt;code&gt;git rebase --help&lt;/code&gt;, it has been explained clearly. For real case scenario -&amp;gt; &lt;a href=&#34;https://stackoverflow.com/questions/51194261/git-rebase-with-merged-commits&#34;&gt;https://stackoverflow.com/questions/51194261/git-rebase-with-merged-commits&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/purush7/testing_git&#34;&gt;This repo&lt;/a&gt; has all the cases using &lt;code&gt;git merge&lt;/code&gt; and &lt;code&gt;git rebase&lt;/code&gt;. Use &lt;code&gt;git reflog&lt;/code&gt; and &lt;code&gt;git log --graph&lt;/code&gt; to understand the commit history&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
